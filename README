This is an implementation of Pass1 and Pass2 of a SIC-Assembler. It was designed as a part of System Software course in my MCA programme.
In pass 1, the source file is provided as a command line argument. A file containing valid opcodes ("optab.txt") is used from which the valid opcodes are fetched and stored in an Opcode Table.
All the statements from the input source program are checked if they are symbols or opcodes. If they are symbols, they are stored in a symbol table with their address. If they are not symbols, they are searched in the Opcode Table to check if they are valid opcodes or invalid. If they are not valid opcodes, they error message is displayed.
After reading each line from the source file, they are stored in the intermediate code file ("intermediate_file.txt") along with the address. The symbol table is also written in a file ("symtab.txt").
In pass 2, the intermediate code file ("intermediate_file.txt") is read and an object program is created. The statements are again checked in the symbol table and in the opcode table. After reading each statement, object codes are generated and stored in the object program file ("object_program.txt"). The records of the object program mainly consists of the starting address of that particular record and the length of the record. There are 3 types of records in an object program, Header record, Text record and the End record.
